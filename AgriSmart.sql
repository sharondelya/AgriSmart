-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.admin2
(
    adminid serial NOT NULL,
    admin_email character varying(255) COLLATE pg_catalog."default" DEFAULT NULL::character varying,
    admin_name character varying(255) COLLATE pg_catalog."default" DEFAULT NULL::character varying,
    admin_password character varying(255) COLLATE pg_catalog."default" DEFAULT NULL::character varying,
    CONSTRAINT admin2_pkey PRIMARY KEY (adminid)
);

CREATE TABLE IF NOT EXISTS public.business
(
    userid serial NOT NULL,
    address character varying(255) COLLATE pg_catalog."default",
    date_banned timestamp without time zone,
    datejoined character varying(255) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    image bytea,
    is_banned boolean DEFAULT false,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    primarylocation character varying(255) COLLATE pg_catalog."default",
    bankaccountnumber character varying(255) COLLATE pg_catalog."default",
    businessdescription text COLLATE pg_catalog."default",
    businessname character varying(255) COLLATE pg_catalog."default",
    businessrating real NOT NULL DEFAULT 0.0,
    contactinfo character varying(255) COLLATE pg_catalog."default",
    targetkeywords text COLLATE pg_catalog."default",
    CONSTRAINT business_pkey PRIMARY KEY (userid),
    CONSTRAINT business_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.cart
(
    cartid serial NOT NULL,
    userid integer NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    is_active boolean DEFAULT true,
    CONSTRAINT cart_pkey PRIMARY KEY (cartid)
);

CREATE TABLE IF NOT EXISTS public.cart_items
(
    cart_item_id serial NOT NULL,
    cartid integer NOT NULL,
    itemid integer NOT NULL,
    itemtype character varying(50) COLLATE pg_catalog."default" NOT NULL,
    quantity integer NOT NULL,
    unit_price numeric(10, 2) NOT NULL,
    total_price numeric(10, 2) NOT NULL,
    businessid integer NOT NULL,
    added_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT cart_items_pkey PRIMARY KEY (cart_item_id)
);

CREATE TABLE IF NOT EXISTS public.chemical
(
    itemid serial NOT NULL,
    itemname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    item_price numeric(10, 2) NOT NULL,
    itemdescription text COLLATE pg_catalog."default",
    chemical_type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    metricsystem character varying(255) COLLATE pg_catalog."default" NOT NULL,
    expirydate date NOT NULL,
    quantity numeric(10, 2) NOT NULL,
    hazardlevel numeric(5, 2) NOT NULL,
    quantityinstock integer NOT NULL,
    image bytea,
    businessid integer NOT NULL,
    itemrating numeric(3, 2) DEFAULT 0.0,
    date_created timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    isdeleted integer DEFAULT 0,
    issponsored boolean DEFAULT false,
    CONSTRAINT chemical_pkey PRIMARY KEY (itemid)
);

CREATE TABLE IF NOT EXISTS public.client
(
    userid serial NOT NULL,
    address character varying(255) COLLATE pg_catalog."default",
    date_banned timestamp without time zone,
    datejoined character varying(255) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    image bytea,
    is_banned boolean DEFAULT false,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    primarylocation character varying(255) COLLATE pg_catalog."default",
    age character varying(255) COLLATE pg_catalog."default",
    gender character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT client_pkey PRIMARY KEY (userid),
    CONSTRAINT client_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.contact
(
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    message character varying(255) COLLATE pg_catalog."default",
    name character varying(255) COLLATE pg_catalog."default",
    subject character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT contact_pkey PRIMARY KEY (email)
);

CREATE TABLE IF NOT EXISTS public.conversation
(
    conversationid serial NOT NULL,
    businessid integer,
    clientid integer,
    CONSTRAINT conversation_pkey PRIMARY KEY (conversationid)
);

CREATE TABLE IF NOT EXISTS public.machinery
(
    itemid serial NOT NULL,
    itemname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    item_price numeric(10, 2) NOT NULL,
    itemdescription text COLLATE pg_catalog."default",
    machinetype character varying(255) COLLATE pg_catalog."default" NOT NULL,
    machinedimension character varying(255) COLLATE pg_catalog."default" NOT NULL,
    machineweight numeric(10, 2) NOT NULL,
    powersource character varying(255) COLLATE pg_catalog."default" NOT NULL,
    warranty integer NOT NULL,
    quantityinstock integer NOT NULL,
    image bytea,
    businessid integer NOT NULL,
    itemrating numeric(3, 2) DEFAULT 0.0,
    date_created timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    isdeleted integer DEFAULT 0,
    issponsored boolean DEFAULT false,
    CONSTRAINT machinery_pkey PRIMARY KEY (itemid)
);

CREATE TABLE IF NOT EXISTS public.message
(
    messageid serial NOT NULL,
    conversationid integer,
    receiverid integer,
    senderid integer,
    text character varying(255) COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT message_pkey PRIMARY KEY (messageid)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    notification_id serial NOT NULL,
    notification_message character varying(255) COLLATE pg_catalog."default",
    "time" timestamp without time zone,
    user_id integer,
    CONSTRAINT notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.order_details
(
    orderdetailkey serial NOT NULL,
    item_delivery_date character varying(255) COLLATE pg_catalog."default",
    item_dispatch_date character varying(255) COLLATE pg_catalog."default",
    itemid integer,
    itemqty integer,
    itemtype character varying(255) COLLATE pg_catalog."default",
    orderid integer,
    delivery_status character varying(50) COLLATE pg_catalog."default" DEFAULT 'Processing'::character varying,
    CONSTRAINT order_details_pkey PRIMARY KEY (orderdetailkey)
);

CREATE TABLE IF NOT EXISTS public.order_table
(
    orderid serial NOT NULL,
    clientid integer NOT NULL,
    cartid integer NOT NULL,
    order_cost numeric(10, 2) NOT NULL,
    honeybeehavencommision numeric(10, 2) NOT NULL,
    totalcost numeric(10, 2) NOT NULL,
    orderdate timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    shippingaddress text COLLATE pg_catalog."default",
    order_status character varying(50) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    payment_status character varying(50) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    stripe_payment_intent_id character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT order_table_pkey PRIMARY KEY (orderid)
);

CREATE TABLE IF NOT EXISTS public.payment
(
    paymentid serial NOT NULL,
    orderid integer,
    subscriptionid integer,
    transactionaccount character varying(255) COLLATE pg_catalog."default",
    transactionamount double precision NOT NULL,
    transactiondate character varying(255) COLLATE pg_catalog."default",
    transactionid character varying(255) COLLATE pg_catalog."default",
    transactionplatform character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT payment_pkey PRIMARY KEY (paymentid)
);

CREATE TABLE IF NOT EXISTS public.reported_business
(
    report3id serial NOT NULL,
    complainee3id integer,
    complainer3id integer,
    report_reason3 character varying(255) COLLATE pg_catalog."default",
    report_type character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT reported_business_pkey PRIMARY KEY (report3id)
);

CREATE TABLE IF NOT EXISTS public.reported_clients
(
    report2id serial NOT NULL,
    complainee2id integer,
    complainer2id integer,
    report_reason2 character varying(255) COLLATE pg_catalog."default",
    report_type character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT reported_clients_pkey PRIMARY KEY (report2id)
);

CREATE TABLE IF NOT EXISTS public.reported_reviews
(
    reportid serial NOT NULL,
    complaineeid integer,
    complainerid integer,
    report_reason character varying(255) COLLATE pg_catalog."default",
    report_type character varying(255) COLLATE pg_catalog."default",
    review_content character varying(255) COLLATE pg_catalog."default",
    reviewid integer,
    CONSTRAINT reported_reviews_pkey PRIMARY KEY (reportid)
);

CREATE TABLE IF NOT EXISTS public.review
(
    reviewid serial NOT NULL,
    clientid integer,
    date text COLLATE pg_catalog."default",
    itemid integer,
    rating integer,
    text text COLLATE pg_catalog."default",
    title text COLLATE pg_catalog."default",
    producttype character varying(50) COLLATE pg_catalog."default",
    orderid integer,
    CONSTRAINT review_pkey PRIMARY KEY (reviewid),
    CONSTRAINT unique_review_per_order_item UNIQUE (clientid, orderid, itemid, producttype)
);

CREATE TABLE IF NOT EXISTS public.service
(
    itemid serial NOT NULL,
    itemname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    item_price numeric(10, 2) NOT NULL,
    itemdescription text COLLATE pg_catalog."default",
    servicetype character varying(255) COLLATE pg_catalog."default" NOT NULL,
    isavailable boolean NOT NULL DEFAULT true,
    basecharges numeric(10, 2) NOT NULL,
    image bytea,
    businessid integer NOT NULL,
    itemrating numeric(3, 2) DEFAULT 0.0,
    date_created timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    isdeleted integer DEFAULT 0,
    issponsored boolean DEFAULT false,
    CONSTRAINT service_pkey PRIMARY KEY (itemid)
);

CREATE TABLE IF NOT EXISTS public.service_cart
(
    cartid serial NOT NULL,
    businessid integer,
    itemid integer,
    itemqty integer,
    itemtype character varying(255) COLLATE pg_catalog."default",
    price double precision NOT NULL,
    userid integer,
    CONSTRAINT service_cart_pkey PRIMARY KEY (cartid)
);

CREATE TABLE IF NOT EXISTS public.subscription
(
    subscriptionid serial NOT NULL,
    businessid integer,
    enddate character varying(255) COLLATE pg_catalog."default",
    expired boolean,
    startdate character varying(255) COLLATE pg_catalog."default",
    subtype integer,
    sponsored_products_limit integer DEFAULT 0,
    sponsored_products_used integer DEFAULT 0,
    CONSTRAINT subscription_pkey PRIMARY KEY (subscriptionid)
);

CREATE TABLE IF NOT EXISTS public.subscription_payments
(
    payment_id serial NOT NULL,
    subscription_id integer NOT NULL,
    business_id integer NOT NULL,
    stripe_payment_intent_id character varying(255) COLLATE pg_catalog."default",
    stripe_payment_method_id character varying(255) COLLATE pg_catalog."default",
    amount numeric(10, 2) NOT NULL,
    currency character varying(3) COLLATE pg_catalog."default" DEFAULT 'INR'::character varying,
    payment_status character varying(50) COLLATE pg_catalog."default" DEFAULT 'pending'::character varying,
    payment_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    plan_name character varying(100) COLLATE pg_catalog."default",
    plan_type integer NOT NULL,
    duration_days integer NOT NULL,
    CONSTRAINT subscription_payments_pkey PRIMARY KEY (payment_id)
);

ALTER TABLE IF EXISTS public.cart
    ADD CONSTRAINT cart_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.client (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.cart_items
    ADD CONSTRAINT cart_items_businessid_fkey FOREIGN KEY (businessid)
    REFERENCES public.business (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.cart_items
    ADD CONSTRAINT cart_items_cartid_fkey FOREIGN KEY (cartid)
    REFERENCES public.cart (cartid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.chemical
    ADD CONSTRAINT chemical_businessid_fkey FOREIGN KEY (businessid)
    REFERENCES public.business (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_chemical_businessid
    ON public.chemical(businessid);


ALTER TABLE IF EXISTS public.machinery
    ADD CONSTRAINT machinery_businessid_fkey FOREIGN KEY (businessid)
    REFERENCES public.business (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_machinery_businessid
    ON public.machinery(businessid);


ALTER TABLE IF EXISTS public.order_table
    ADD CONSTRAINT order_table_cartid_fkey FOREIGN KEY (cartid)
    REFERENCES public.cart (cartid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.order_table
    ADD CONSTRAINT order_table_clientid_fkey FOREIGN KEY (clientid)
    REFERENCES public.client (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.review
    ADD CONSTRAINT fk_review_order FOREIGN KEY (orderid)
    REFERENCES public.order_table (orderid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.service
    ADD CONSTRAINT service_businessid_fkey FOREIGN KEY (businessid)
    REFERENCES public.business (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_service_businessid
    ON public.service(businessid);


ALTER TABLE IF EXISTS public.subscription_payments
    ADD CONSTRAINT subscription_payments_business_id_fkey FOREIGN KEY (business_id)
    REFERENCES public.business (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.subscription_payments
    ADD CONSTRAINT subscription_payments_subscription_id_fkey FOREIGN KEY (subscription_id)
    REFERENCES public.subscription (subscriptionid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;